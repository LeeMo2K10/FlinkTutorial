JobManager，相当于Spark 中的ApplicationMaster中的Driver
    作业管理器，是一个JVM进程，接收作业
    分发执行图到taskManager

TaskManager，相当于Spark 中的Executor
    任务管理器，是一个JVM进程，执行作业，它可能会在独立的线程上执行一个或多个subtask
    Flink中会有多个TaskManager
    每个TaskManager都包含一定数量的插槽slots

Slots，相当于Spark Executor中的cpu core，相当于工作线程。但不同的是Slots是静态的，Spark中的Executor是动态的
    插槽，推荐值是就当前节点的CPU CORES核心数
    主要是隔离内存
    为了控制一个TaskManager能接收多少个task，TaskManager通过task slot来进行控制（一个TaskManager至少有一个slot）

最大并行度
    Spark:  Executor数 * 每个Executor 中的cpu core
    Flink:  TaskManager数 * 每个TaskManager 中的Task Slot

ResourceManger
    资源管理器


Dispatcher，在yarn模式下不会创建生成
    分发器，为应用提交提供了REST接口
    提供一个Web UI，展示作业流程


Flink中的执行图可以分成四层：
    StreamGraph -> JobGraph -> ExecutionGraph -> 物理执行图
    StreamGraph:   是根据用户通过Stream API编写的代码生成的最初的图。用来表示程序的拓扑结构。
                   JobGraph:  【Client上生成】StreamGraph经过优化生成了JobGraph，提交给JobManager的数据结构。主要的优化为，将多个符合条件的节点chain在一起作为一个节点
                               ExecutionGraph:  【JobManager上生成】JobManager根据JobGraph生成ExecutionGraph。ExecutionGraph是JobGraph的并行化版本，是调度最核心的数据结构。
                                                 物理执行图：【TaskManager运行】
                                                    JobManager根据ExecutionGraph对Job进行调度后，在各个TaskManager上部署Task后形成的 "图"，并不是一个具体的数据结构




Flink支持数据类型：
    1、基础数据类型，Java和Scala基础数据类型
    2、Java和Scala元组（Tuples)
    3、Scala样例类（case classes)
    4、Java简单对象（POJOs)
    5、其它（Arrays, Lists, Maps, Enums，等等

Flink支持时间语义：
    1、Event Time: 事件创建的时间
    2、Ingestion Time: 数据进入Flink的时间
    3、Processing Time: 执行操作算子的本地系统时间，与机器无关


Spark Streaming         Flink
DStream             DataStream
Transformation      Transformation
Action              Sink
Task                SubTask
Pipline             Oprator chains
DAG                 DataFlow Graph
Master+Driver       JobManager
Worker+Executor     TaskManager


mvn archetype:generate \
-DarchetypeGroupId=org.apache.flink \
-DarchetypeArtifactId=flink-quickstart-java \
-DarchetypeVersion=1.10.0


